plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'com.google.devtools.ksp'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
}

apply plugin: 'witness'

configurations.configureEach {
    exclude module: "commons-logging"
}

def canonicalVersionCode = 406
def canonicalVersionName = "1.23.0"

def postFixSize = 10
def abiPostFix = ['armeabi-v7a' : 1,
                  'arm64-v8a'   : 2,
                  'x86'         : 3,
                  'x86_64'      : 4,
                  'universal'   : 5]

// Function to get the current git commit hash so we can embed it along w/ the build version.
// Note: This is visible in the SettingsActivity, right at the bottom (R.id.versionTextView).
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "--short", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    namespace 'network.loki.messenger'
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'LICENSE', 'NOTICE', 'asm-license.txt', 'META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/proguard/androidx-annotations.pro']
        }
    }


    splits {
        abi {
            enable !project.hasProperty('huawei') // huawei builds do not need the split variants
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.15'
    }

    defaultConfig {
        versionCode canonicalVersionCode * postFixSize
        versionName canonicalVersionName

        compileSdk androidCompileSdkVersion
        minSdkVersion androidMinimumSdkVersion
        targetSdkVersion androidTargetSdkVersion

        multiDexEnabled = true

        vectorDrawables.useSupportLibrary = true
        setProperty("archivesBaseName", "session-${versionName}")

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "GIT_HASH", "\"$getGitHash\""
        buildConfigField "String", "CONTENT_PROXY_HOST", "\"contentproxy.signal.org\""
        buildConfigField "int", "CONTENT_PROXY_PORT", "443"
        buildConfigField "String", "USER_AGENT", "\"OWA\""
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$canonicalVersionCode"
        resourceConfigurations += []

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test.java.srcDirs += sharedTestDir
        androidTest.java.srcDirs += sharedTestDir
        main {
            assets.srcDirs += "$buildDir/generated/binary"
        }
        test {
            resources.srcDirs += "$buildDir/generated/binary"
            resources.srcDirs += "$projectDir/src/main/assets"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            isDefault true
            minifyEnabled false
            enableUnitTestCoverage true
            signingConfig signingConfigs.debug
        }
    }

    signingConfigs {
        play {
            if (project.hasProperty('SESSION_STORE_FILE')) {
                storeFile file(SESSION_STORE_FILE)
                storePassword SESSION_STORE_PASSWORD
                keyAlias SESSION_KEY_ALIAS
                keyPassword SESSION_KEY_PASSWORD
            }
        }
        huawei {
            if (project.hasProperty('SESSION_HUAWEI_STORE_FILE')) {
                storeFile file(SESSION_HUAWEI_STORE_FILE)
                storePassword SESSION_HUAWEI_STORE_PASSWORD
                keyAlias SESSION_HUAWEI_KEY_ALIAS
                keyPassword SESSION_HUAWEI_KEY_PASSWORD
            }
        }

        debug {
            // This keystore is for debug builds only and it should never be used to
            // sign the release apk.
            storeFile new File(rootProject.projectDir, "etc/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    flavorDimensions "distribution"
    productFlavors {
        play {
            isDefault true
            dimension "distribution"
            apply plugin: 'com.google.gms.google-services'
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "org.session.libsession.utilities.Device", "DEVICE", "org.session.libsession.utilities.Device.ANDROID"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField 'String', 'PUSH_KEY_SUFFIX', '\"\"'
            signingConfig signingConfigs.play
        }

        huawei {
            dimension "distribution"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "org.session.libsession.utilities.Device", "DEVICE", "org.session.libsession.utilities.Device.HUAWEI"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField 'String', 'PUSH_KEY_SUFFIX', '\"_HUAWEI\"'
            signingConfig signingConfigs.huawei
        }

        website {
            dimension "distribution"
            ext.websiteUpdateUrl = "https://github.com/session-foundation/session-android/releases"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "org.session.libsession.utilities.Device", "DEVICE", "org.session.libsession.utilities.Device.ANDROID"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
            buildConfigField 'String', 'PUSH_KEY_SUFFIX', '\"\"'
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def abiName = output.getFilter("ABI") ?: 'universal'
            def postFix = abiPostFix.get(abiName, 0)

            def flavour = (variant.flavorName == 'huawei') ? "-huawei" : ""

            if (postFix >= postFixSize) throw new AssertionError("postFix is too large")
            output.outputFileName = output.outputFileName = "session-${variant.versionName}-${abiName}${flavour}.apk"
            output.versionCodeOverride = canonicalVersionCode * postFixSize + postFix
        }
    }


    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    def huaweiEnabled = project.properties['huawei'] != null
    lint {
        abortOnError true
        baseline file('lint-baseline.xml')
    }

    applicationVariants.configureEach { variant ->
        if (variant.flavorName == 'huawei') {
            variant.getPreBuildProvider().configure { task ->
                task.doFirst {
                    if (!huaweiEnabled) {
                        def message = 'Huawei is not enabled. Please add -Phuawei command line arg. See BUILDING.md'
                        logger.error(message)
                        throw new GradleException(message)
                    }
                }
            }
        }
    }

    tasks.register('testPlayDebugUnitTestCoverageReport', JacocoReport) {
        dependsOn 'testPlayDebugUnitTest'

        reports {
            xml.required = true
        }

        // Add files that should not be listed in the report (e.g. generated Files from dagger)
        def fileFilter = []
        def mainSrc = "$projectDir/src/main/java"
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/playDebug", excludes: fileFilter)

        // Compiled Kotlin class files are written into build-variant-specific subdirectories of 'build/tmp/kotlin-classes'.
        classDirectories.from = files([kotlinDebugTree])

        // To produce an accurate report, the bytecode is mapped back to the original source code.
        sourceDirectories.from = files([mainSrc])

        // Execution data generated when running the tests against classes instrumented by the JaCoCo agent.
        // This is enabled with 'enableUnitTestCoverage' in the 'debug' build type.
        executionData.from = "${project.buildDir}/outputs/unit_test_code_coverage/playDebugUnitTest/testPlayDebugUnitTest.exec"
    }


    testNamespace 'network.loki.messenger.test'
    lint {
        abortOnError true
        baseline file('lint-baseline.xml')
    }
}

apply {
    from("ipToCode.gradle.kts")
}

preBuild.dependsOn ipToCode

dependencies {
    implementation project(':content-descriptions')

    ksp(libs.androidx.hilt.compiler)
    ksp(libs.dagger.hilt.compiler)
    ksp(libs.glide.ksp)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.androidx.hilt.work)

    implementation(libs.hilt.android)
    implementation libs.androidx.appcompat
    implementation libs.androidx.recyclerview
    implementation libs.material
    implementation libs.flexbox
    implementation libs.androidx.legacy.support.v13
    implementation libs.androidx.cardview
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.legacy.preference.v14
    implementation libs.androidx.gridlayout
    implementation libs.androidx.exifinterface
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.paging.runtime.ktx
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.activity.compose
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.core.ktx
    implementation libs.androidx.work.runtime.ktx

    playImplementation (libs.firebase.messaging) {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    if (project.hasProperty('huawei')) huaweiImplementation libs.huawei.push

    implementation libs.androidx.media3.exoplayer
    implementation libs.androidx.media3.ui
    implementation libs.conscrypt.android
    implementation libs.aesgcmprovider
    implementation libs.android
    implementation libs.shortcutbadger
    implementation libs.httpclient.android
    implementation libs.photoview
    implementation libs.glide
    implementation libs.compose
    implementation libs.roundedimageview
    implementation libs.eventbus
    implementation libs.android.image.cropper
    implementation (libs.subsampling.scale.image.view) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation (libs.tooltips) {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation (libs.kinkerapps.android.smsmms) {
        exclude group: 'com.squareup.okhttp', module: 'okhttp'
        exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
    }
    implementation libs.stream
    implementation libs.androidx.sqlite.ktx
    implementation libs.sqlcipher.android
    implementation project(":libsignal")
    implementation project(":libsession")
    implementation libs.kotlinx.serialization.json
    implementation libs.curve25519.java
    implementation project(":liblazysodium")
    implementation libs.protobuf.java
    implementation libs.jackson.databind
    implementation libs.okhttp
    implementation libs.phrase
    implementation libs.copper.flow
    implementation libs.kotlinx.coroutines.android
    implementation libs.kovenant
    implementation libs.kovenant.android
    implementation libs.rxbinding
    implementation libs.opencsv
    testImplementation libs.junit
    testImplementation libs.assertj.core
    testImplementation libs.mockito.inline
    testImplementation libs.mockito.kotlin
    androidTestImplementation libs.mockito.android
    androidTestImplementation libs.mockito.kotlin
    testImplementation libs.androidx.core
    testImplementation libs.androidx.core.testing
    testImplementation libs.kotlinx.coroutines.testing
    androidTestImplementation libs.kotlinx.coroutines.testing
    // Core library
    androidTestImplementation libs.androidx.core

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules

    // Assertions
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.truth
    testImplementation libs.truth
    androidTestImplementation libs.truth

    // Espresso dependencies
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.espresso.contrib
    androidTestImplementation libs.androidx.espresso.intents
    androidTestImplementation libs.androidx.espresso.accessibility
    androidTestImplementation libs.androidx.espresso.web
    androidTestImplementation libs.androidx.idling.concurrent
    androidTestImplementation libs.androidx.espresso.idling.resource
    androidTestImplementation libs.androidx.compose.ui.test.junit4
    debugImplementation libs.androidx.compose.ui.test.manifest
    androidTestUtil libs.androidx.orchestrator

    testImplementation libs.robolectric
    testImplementation libs.robolectric.shadows.multidex
    testImplementation libs.conscrypt.openjdk.uber // For Robolectric
    testImplementation libs.turbine

    // compose
    implementation platform(libs.androidx.compose.bom)
    testImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation platform(libs.androidx.compose.bom)

    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.animation
    implementation libs.androidx.compose.ui.tooling
    implementation libs.androidx.compose.runtime.livedata
    implementation libs.androidx.compose.foundation.layout
    implementation libs.androidx.compose.material3

    androidTestImplementation libs.androidx.ui.test.junit4.android
    debugImplementation libs.androidx.compose.ui.test.manifest

    // Navigation
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.navigation.compose

    implementation libs.accompanist.themeadapter.appcompat
    implementation libs.accompanist.permissions
    implementation libs.accompanist.drawablepainter

    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.lifecycle
    implementation libs.androidx.camera.view

    implementation libs.zxing.core

    // Note: 1.1.0 is the latest stable release as of 2024/12/18
    implementation libs.androidx.biometric
}

static def getLastCommitTimestamp() {
    new ByteArrayOutputStream().withStream { os ->
        return os.toString() + "000"
    }
}

/**
 * Discovers supported languages listed as under the res/values- directory.
 */
def autoResConfig() {
    def files = new ArrayList<String>()
    def root = file("src/main/res")
    root.eachFile { f -> files.add(f.name) }
    ['en'] + files.collect { f -> f =~ /^values-([a-z]{2}(-r[A-Z]{2})?)$/ }
         .findAll { matcher -> matcher.find() }
         .collect { matcher -> matcher.group(1) }
         .sort()
}
